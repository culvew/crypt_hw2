MY CODE DOESN'T CURRENTLY WORK. 

That being said. My diffie-helman currently correctly finds primes, and can calculate primitive roots. I also have a working Modular exponentiation function. I have almost everything needed for Needham-Schroeder Protocol, but I had trouble working through the sockets in c++(my only experience with sockets is limited experience in Operating Systems). I believe I have all the logic for it correct, but I don't have the correct file descriptors for the clients read and write. 

I started by writing a function to check if numbers were prime. In order to do this I had to write a modular exponentiation function. I found that you only, needed to run the prime test by about a half dozen specific numbers, to be relatively positive that it was a prime number.
Once I had a function that could check if a number was prime, I generated random integers using rand() until I found one that was prime. One issue I ran into was with my base in my modular exponentiation function would be to large, and when I squared it in the function it got larger then MAX_INT. I did end up fixing this issue. I currently only find the loweset primitive root. While this works, it's not as secure as finding a random one. 
my Needham-Schroeder is set up, but doesn't work because my sockets aren't set correctly. I start by having the clients message there name to the server which sends back (PRIME,PRIMITIVE_ROOT,PUBLIC_KEY_KDC). They then send back there public_key.
Next one of the two client, identified as the requester, asks the KDC to talk to the other client. This request includes a timestamp. It then is sent an encoded packet, and decodes part of it to get the AB session key, and sends the rest of the packet(which is encoded to B) to B. B then decodes this and sends a response with a new Timestamp to A.